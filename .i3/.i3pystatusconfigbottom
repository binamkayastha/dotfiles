from i3pystatus import Status

status = Status(standalone=True)

# Displays clock like this:
# Tue 30 Jul 11:59:46 PM KW31
#                          ^-- calendar week
#status.register("clock",
#    format="%a %-d %b %X KW%V",)

status.register("clock",
    format=('%a %b %-d %b %X', 'America/New_York'),)

# Shows the average load of the last minute and the last 5 minutes
# (the default value for format is used)
#status.register("load")

# Shows your CPU temperature, if you have a Intel CPU
status.register("temp",
    format="CPUtemp:{temp:.0f}°C",)

status.register("battery",
    format="{status}",
    status={
	"DIS": "↓",
	"CHR": "↑",
 	"FULL": "UNPLUGNOW!",
    },)

# The battery monitor has many formatting options, see README for details

# This would look like this, when discharging (or charging)
# ↓14.22W 56.15% [77.81%] 2h:41m
# And like this if full:
# =14.22W 100.0% [91.21%]
#
# This would also display a desktop notification (via D-Bus) if the percentage
# goes below 5 percent while discharging. The block will also color RED.
# If you don't have a desktop notification demon yet, take a look at dunst:
#   http://www.knopwob.org/dunst/
status.register("battery",
    format="{status}/{consumption:.2f}W {percentage:.2f}% [{percentage_design:.2f}%] {remaining:%E%hh:%Mm}",
    alert=True,
    alert_percentage=15,
    alert_format_title="LOW BATTERY FOOL",
    alert_format_body="Battery {battery_ident} has only {percentage:.2f}% ({remaining:%E%hh:%Mm}) remaining!",
    status={
        "DIS": "↓ Discharching",
        "CHR": "↑ Charging",
        "FULL": "BATERY FULL BATTERY FULL BATTERY FULL BATTERY FULL",
    },
    full_color="#b7fea0",)

status.register("battery",
    format="{status}",
    status={
	"DIS": "",
	"CHR": "",
 	"FULL": "UNPLUGNOW!",
    },)

# This would look like this:
# Discharging 6h:51m
#status.register("battery",
#    format="{status} {remaining:%E%hh:%Mm}",
#    alert=True,
#    alert_percentage=5,
#    status={
#        "DIS":  "Discharging",
#        "CHR":  "Charging",
#        "FULL": "Bat full",
#    },)

# Displays whether a DHCP client is running
#status.register("runwatch",
#    name="DHCP",
#    path="/var/run/dhclient*.pid",)

# Shows disk usage of /
# Format:
# 42/128G [86G]
status.register("disk",
    path="/",
    format="{used}/{total}G [{avail}G]",)

# Shows pulseaudio default sink volume
#
# Note: requires libpulseaudio from PyPI
status.register("pulseaudio",
    format="♪{volume}",)

# Shows mpd status
# Format:
# Cloud connected▶Reroute to Remain
#status.register("mpd",
#    format="{title}{status}{album}",
#    status={
#        "pause": "▷",
#        "play": "▶",
#        "stop": "◾",
#    },)

status.run()
