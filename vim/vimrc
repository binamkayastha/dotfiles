" 224 CTK <-- car license of the guy who opend the car door and hit mine
set nocompatible              " be iMproved, required
filetype off                  " required

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
"set cursorcolumn
"set cursorline

" Don't use Ex mode, use Q for formatting
map Q gq

" In an xterm the mouse should work quite well, thus enable it.
set mouse=a


" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" My edits to .vimrc
set encoding=utf-8
set t_Co=256
set background=dark
set number

set expandtab
set shiftwidth=4
set softtabstop=4
set ignorecase
set list
set listchars=tab:··,trail:·,extends:>,precedes:<,nbsp:+
" set listchars=tab:▸\ ,trail:·
set spelllang=en
set spellfile=$HOME/spell/en.utf-8.add

" Removes trailing spaces
" command Notrail %s/\s\+$//e

" " C
:autocmd FileType c :set spell
:autocmd FileType c :hi clear SpellBad
:autocmd FileType c :hi SpellBad cterm=underline
:autocmd FileType c :match ErrorMsg '\%>80v.\+'

inoremap chk ✔ <ESC>0j
inoremap currdate <ESC>"=strftime("%a %d %b %Y")<CR>Pa

noremap! <C-BS> <C-w>
noremap! <C-h> <C-w>
noremap  <buffer> <silent> k gk
noremap  <buffer> <silent> j gj
vnoremap <C-c> "+y
nnoremap <CR> o<ESC>
nnoremap <Space> <Nop>
let mapleader = ","
let maplocalleader = " "

" AUTOCOMMANDS
" Turns of wrapping in html files
:autocmd BufNewFile,BufRead *.html setlocal nowrap

" Abbreviations
" " Latex
:autocmd FileType tex :iabbrev starttex \documentclass{article}<CR>\usepackage{graphicx}<CR>\usepackage{float}<CR>\usepackage{indentfirst}<CR><CR>\begin{document}<CR>\title{class - HW# - Name}<CR>\author{Binam Kayastha}<CR>\date{\today}<CR>\maketitle<CR>\end{document}
:autocmd FileType tex :iabbrev sec \section
:autocmd FileType tex :inoremap ssn \subsection
:autocmd FileType tex :inoremap sssn \subsubsection
:autocmd FileType tex :inoremap ssssn \subsubsubsection
:autocmd FileType tex :iabbrev ind \indent
:autocmd FileType tex :iabbrev b \begin
:autocmd FileType tex :iabbrev e \end
:autocmd FileType tex :iabbrev v verbatim
:autocmd FileType tex :iabbrev ll  \begin{lstlisting}[breaklines]
:autocmd FileType tex :iabbrev hl  \|\colorbox{yellow!30}
:autocmd FileType tex :iabbrev bulpoint \begin{itemize}<CR>\end{itemize}
:autocmd FileType tex :iabbrev numpoint \beign{enumerate}<CR>\end{enumerate}
:autocmd FileType tex :iabbrev rarrow \rightarrow
:autocmd FileType tex :iabbrev larrow \leftarrow
:autocmd FileType tex :iabbrev rarrowb \(\rightarrow\)
:autocmd FileType tex :iabbrev larrowb \(\leftarrow\)

" " Math
:autocmd FileType tex :iabbrev R$ I\!R
:autocmd FileType tex :inoremap sigma \sum_{i=1}^n
:autocmd FileType tex :inoremap frac \frac{}{}<esc>hhi
:autocmd FileType tex :inoremap fracb \\frac{}{}\)<esc>hhhhi
:autocmd FileType tex :inoremap theta \theta
:autocmd FileType tex :inoremap thetab \(\theta\)
:autocmd FileType tex :inoremap fsub _{}<esc>i
:autocmd FileType tex :inoremap fsup ^{}<esc>i
:autocmd FileType tex :inoremap funck \(\)<esc>hi
:autocmd FileType tex :inoremap funcline \[\]<esc>hi
:autocmd FileType tex :inoremap bold \textbf{}<esc>i

" " Doxygen
" For once, these whitespaces are intentional:
:autocmd FileType c :inoremap @p @param 
:autocmd FileType c :inoremap @r @return 

if has('persistent_undo')      "check if your vim version supports it
  set undofile                 "turn on the feature  
  set undodir=$HOME/.vim/undo  "directory where the undo files will be stored
endif
" This is a comment


" Plugin Stuff
" Does fugitive do gitgutter? What are vim tab buffers?
" Why does fugitive not work with soft linked files
" Git add certain lines
call plug#begin('~/.vim/plugged')
"Plug 'leafgarland/typescript-vim'
"Plug 'tpope/vim-surround'
Plug '907th/vim-auto-save'
Plug 'airblade/vim-gitgutter'
Plug 'easymotion/vim-easymotion'
Plug 'scrooloose/syntastic' " Does syntax checking for a lot of languages
Plug 'tpope/vim-fugitive' "Gedit/Gstatus/Gdiff/Gblame
Plug 'tpope/vim-commentary'
Plug 'vim-airline/vim-airline'
call plug#end()

" " AutoSave
let g:auto_save = 1

" " EasyMotion
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
" Move to line
map <Leader>l <Plug>(easymotion-bd-jk)
" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)

" " For commentary
nmap <C-_> gcc
vmap <C-_> gcc

" " airline
set laststatus=2
let g:airline_enable_branch=1
let g:airline_inactive_collapse=1
let g:airline_detect_spell=1

let g:airline_powerline_fonts=1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_symbols.branch=':'
let g:airline_symbols.linenr=''
let g:airline_symbols.maxlinenr=''
"let g:airline_section_z = airline#section#create_right(['linenr', 'maxlinenr'])

let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#enabled = 1

" Install exuberant-ctags to use ctrl-] to jumpt to definitoins
:set tags+=$HOME/programming/Projects/ETodo/tags
